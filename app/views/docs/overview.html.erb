Buster.JS overview

<p>Buster.JS is a JavaScript test framework for node and browsers.</p>

<h2>Installation</h2>

<p>See <a href="<%= doc_url "getting-started" %>">getting started</a>.</p>

<h2>The config file</h2>

<p>Buster.JS needs a config file, both for node.js tests and browser tests. Name the config file <kbd>buster.js</kbd> and put it in either <kbd>tests/</kbd> or <kbd>specs/</kbd> in your project.</p>

<pre><code>var config = module.exports;

config["My tests"] = {
    env: "browser",        // or "node"
    sources: [
        "../lib/mylib.js", // Paths are relative to config file
        "../lib/**/*.js"   // Glob patterns supported
    ],
    tests: [
        "*-test.js"
    ]
}

// Add more configuration groups as needed</code></pre>

<p>Run tests for your config file with:</p>

<pre>buster test
// Assumes test/buster.js or spec/buster.js

buster test --config anywhere/buster.js
// Can also specify config file</pre>


<h2>Test cases</h2>

<p>Typically, you have one test case per file. Here's an example, in <kbd>test/my-thing-test.js</kbd>. Since the file name ends with <kbd>-test.js</kbd>, the config file above will load the test.</p>

<pre><code>buster.testCase("My thing", {
    "has the foo and bar": function () {
        assert.equals("foo", "bar");
    },

    "states the obvious": function () {
        assert(true);
    }
})</code></pre>

<p>Note that you are free to name your test cases whatever you want. They don't have to start with <code>"test ..."</code> or <code>"should ..."</code>.</p>

<h2>Examples</h2>

<p>
  Buster.JS has pluggable "front-ends" to specifying
  examples/tests/whatever. Here's the other bundled way of doing it:
</p>

<pre><code>// Expose describe and it functions globally
buster.spec.expose();

describe("My thing", function () {
    it("has the foo and bar", function () {
        expect("foo").toEqual("bar");
    });

    it("states the obvious", function () {
        expect(true).toBeSameAs(true);;
    });
});</code></pre>

<h2>Browser testing</h2>

<p>Buster.JS can automate browsers, JsTestDriver style. First, start the server.</p>

<p><%= img "overview/buster-server-start.png", :width => "633", :height => "382" %></p>

<p>Open the browsers you want to run tests in and click the capture button.</p>

<p><%= img "overview/buster-server-capture-firefox.png", :width => "827", :height => "339" %></p>

<p>Buster.JS automatically runs the tests in all the captured browsers.</p>

<p><%= img "overview/buster-test-run-browsers.png", :width => "633", :height => "382" %></p>

<h2>Static HTML based browser testing</h2>

<p>Buster also has a static browser runner that runs tests by opening a web page in a browser. This is similar to QUnit, Mocha, etc.</p>

<p><%= img "overview/buster-static-start.png", :width => "529", :height => "348" %></p>

<p><%= img "overview/buster-static-success.png", :width => "514", :height => "470" %></p>

<h2>Node testing</h2>

<p>Works just like browser tests, but you need to require Buster.JS in your tests.</p>

<pre><code>var buster = require("buster");
var myLib = require("../lib/my-lib");

buster.testCase("A test case", {
    "test it": function () {
        assert(myLib.doIt());
    }
})</code></pre>

<p>
  You can now run the file simply by doing <code>`node my-test.js`</code>, or
  you can create a configuration file with <code>env: "node"</code> that will
  run all tests in your project.
</p>

<p>Use <kbd>buster test</kbd> in a terminal to initiate the test run. Here's the test output for <%= m "args" %>.</p>

<p><%= img "node-testing/buster-test-node.png", :width => "633", :height => "382" %></p>

<h2>Assertions</h2>

<p>
  Buster.JS comes <a href="https://busterjs.org/docs/buster-assertions/">packed
  with assertions</a>, and a simple DSL to add app-specific custom assertions.
</p>

<pre><code>assert(true);
assert.same(two, objects);
assert.equals(two, objects);
assert.defined(something);
assert.exception(function () { ... });
assert.isNull();
// .. and many more</code></pre>

<p>Note the lack of <code>assert.notEquals</code>, <code>assert.notDefined</code> etc. Instead, Buster.JS provides a more symmetric API.</p>

<pre><code>// This assertion does not exist!
assert.notEquals(foo, bar);

// Instead:
refute.equals(two, objects);

// And so on
refute(false);
refute.same(two, objects);
refute.defined(something);</code></pre>

<p>So instead of changing the function name, replace <code>assert</code> with <code>refute</code>.</p>

<p><code>assert.match</code> is neat. All the assertions below will pass.</p>

<pre><code>// Partial property matching
var largeObject = {foo: "bar", baz: {test: "it"}};
assert.match(largeObject, {foo: "bar"});

// Fancy string matching
assert.match("Yeah!", { toString: function () { return "yeah"; } });

// Regexp matching
assert.match("Give me something", /^[a-z\s]$/i);

// Lazy types
assert.match("123", 123);

// DOM elements
var el = document.getElementById("myEl");

assert.match(el, {
    tagName: "h2",
    className: "item",
    innerHTML: "Howdy"
});</code></pre>

<p>
  Adding your own custom assertions is easy. The DSL produces both an assert
  and refute. If you provide an <code>expectation</code> name, an expectation is
  created, too:
</p>

<pre><code>buster.assertions.add("inRange", {
    assert: function (num, lower, upper) {
        return num >= lower && num <= upper;
    },
    assertMessage: "Expected ${1} to be between ${2} and ${3}",
    refuteMessage: "Expected ${1} not to be between ${2} and ${3}",
    expectation: "toBeInRange"
});

// Produces:
assert.inRange(num, 0, 10);
refute.inRange(num, 0, 10);
expect(num).toBeInRange(0, 10);</code></pre>

<h2>BDD syntax</h2>

<p>
  Buster.JS is pluggable so you can write your own front-ends. Buster.JS also
  ships with two built-in front-ends; the xUnit style test cases we saw
  previously, and BDD style specs/examples.
</p>

<pre><code>buster.spec.expose(); // Make spec functions global

describe("Bowling kata", function () {
    before(function () {
        this.game = new BowlingGame();

        this.rollMany = function (rolls, pins) {
            for (var i = 0; i < rolls; ++i) {
                this.game.roll(pins);
            }
        };
    });

    it("yields score 0 for gutter game", function () {
        this.rollMany(20, 0);
        expect(this.game.score()).toEqual(0);
    });
});</code></pre>

<h2>Reporters</h2>

<p>
  There are a number of reporters built into Buster.JS. There is also a simple
  API for building your own reporters.
</p>

<p>The default reporter is <kbd>dots</kbd>:</p>

<p><%= img "overview/buster-test-reporter-dots.png", :width => "633", :height => "382" %></p>

<p>Other reporters:</p>

<p><%= img "overview/buster-test-reporter-specification.png", :width => "633", :height => "382" %></p>

<p><%= img "overview/buster-test-reporter-xml.png", :width => "873", :height => "416" %></p>

<p><%= img "overview/buster-test-reporter-quiet.png", :width => "633", :height => "382" %></p>

<p><%= img "overview/buster-test-reporter-tap.png", :width => "633", :height => "382" %></p>

<p>
  All human-consumable reporters (i.e. not xml and tap output) can use no
  colors, bright colors or dim colors.
</p>

<h2>Deferred/pending tests</h2>

<p>Commenting out an entire test case is bad. It will leave the test case out of the loop entirely, and you might forget to comment it back in again before pushing your code.</p>

<p>To remedy this, Buster.JS supports deferring a test so it doesn't actually run, but you get notified that there's a deferred tests every time you run your test suite.</p>

<p><%= img "overview/buster-test-deferred.png", :width => "633", :height => "382" %></p>

<p>To defer a test, add <kbd>//</kbd> to the start of the test name.</p>

<pre><code>buster.testCase("My tests", {
    "// bla bla bla test case": function () {
        // This function will not be called
    },

    "this one is not deferred and will run": function () {
        assert(true);
    },

    "// exhibits feature A": "A simple place-holder, we need to detail this test"
})</code></pre>

<h2>Mocking and stubbing</h2>

<p>
  Buster.JS ships with <a href="http://sinonjs.org">Sinon.JS</a>. Every test in
  a test case has a sandbox associated with it, making it easy to mock and stub
  without worrying about side-effects beyond the scope of the
  test. <code>assert</code> also comes with lots of Sinon.JS-aware assertions.
</p>

<pre><code>buster.testCase("My tests", {
    "demonstrates stubbing": function () {
        this.stub(myLib.thingie, "aMethod"); // Will be automatically reverted
                                             // after the test completes
        doSomething();
        assert.calledOnce(myLib.thingie.aMethod);
    }
})</code></pre>

<p>See full docs at <a href="<%= doc_url "sinon-buster" %>">sinon-buster</a>.</p>

<h2>Asynchronous tests</h2>

<p>Asynchronous tests are tests that aren't finished running when the test method has finished executing. To tag a test as async, have the test function take one argument, <code>done</code>.</p>

<pre><code>buster.testCase("My thing", {
    "test not asynchronous": function () {
        assert(true);
    },

    "test asynchronous": function (done) {
        myLibrary.doAjaxRequest("/foo", function (response) {
            assert.equals(response.statusCode, 200);
            done();
        });
    }
})</code></pre>

<p>
  The <code>done</code> argument is a function. Call it to tell Bueter.JS that
  the asynchronous test has finished running. If you <em>don't</em>
  call <code>done</code>, the test will eventually time out and fail. You can
  also have the test function return a <em>thenable</em> promise to make it
  asynchronous.
</p>

<p><code>setUp</code> and <code>tearDown</code> can also be asynchronous. The procedure is identical to that of tests.</p>

<pre><code>buster.testCase("My thing", {
    setUp: function (done) {
        this.httpServer = http.createServer(function (req, res) {
            res.writeHead(418);
            res.end();
        });
        this.httpServer.listen(17171, function () { done(); });
        this.myThing = new MyThing();
        this.myThing.attach(this.httpServer);
    },

    tearDown: function (done) {
        this.httpServer.on("close", function () { done(); });
        this.httpServer.close();
    },

    // ... tests
})</code></pre>

<h2>Test case contexts</h2>

<p>
  A test case can have nested contexts, as deep as you want. Pass an object
  instead of a function to create a context. Nested contexts can have their own
  setUp and tearDown methods.
</p>

<pre><code>buster.testCase("My thing", {
    setUp: function () {
        this.myThing = new MyThing();
    },

    "simple test": function () {
        assert(true);
    },

    "on steroids": {
        setUp: function () {
            this.myThing.onSteroids = true;
        },

        // ... tests

        "with cowbell": {
            setUp: function () {
                this.myThing.cobwell = true;
            },

            // ... tests
        }
    }
})</code></pre>

<p><code>setUp</code> is called top-down, so when a test in the context <code>"with cowbell"</code> is called, the root <code>setUp</code> is called, then the one in <code>"on steroids"</code>, then lastly the one in <code>"with cowbell"</code>. The <code>this</code> is the same in all contexts.</p>

<h2>Proxying to http servers</h2>

<p>In your browser tests you might want to perform HTTP request to a server, such as your application server. This can be difficult since your tests run via the Buster.JS server, and you can't access your application server due to cross domain origin policies in browsers.</p>

<p>To remedy this, Buster.JS lets you set up a proxy server in your config file.</p>

<pre><code>var config = module.exports;

config["My tests"] = {
    sources: ["../lib/**/*.js"],
    tests: ["*-test.js"],
    resources: {
        "/app": "http://192.168.1.200:3030"
    }
}</code></pre>

<p>A request to <kbd>/app/foo</kbd> will be proxied to <kbd>http://192.168.1.200:3030/foo</kbd>.</p>

<p>If you're talking to an app server with state, you probably want to reset it before every test to avoid leaks from test case to test case. You're responsible for doing that yourself. Here's an example using an asynchronous setUp that won't run the test until the request to reset the app server has ended.</p>

<pre><code>buster.testCase("My tests", {
    setUp: function (done) {
        myHttpLib("/app/reset", {
            success: function () { done(); }
        });
    },

    // ... tests here ...
})</code></pre>

<h2>Running a subset of tests</h2>

<p>To run a single test, pass it's full name as an operand to <kbd>buster test</kbd>.</p>

<pre>buster test "My tests should run this particular test"</pre>

<p>The operand is treated as a JavaScript regular expression so you can do partial matching and regex stuff in it as well.</p>

<pre>buster test "delete user"</pre>

<p>If you don't quote the operand, it will be treated as a series of OR'd filters</p>

<p>To run a single file, do this:</p>

<pre>buster test --file test/mytest.js</pre>

<p>This assumes the presence of a config file, and just like plain <kbd>buster test</kbd> it tries to find a config file automatically, if you don't specify one with <kbd>--config</kbd>. Buster needs the config file to load your proxies, library code, dependencies, and so on.</p>


<h2>Testing AJAX</h2>

<p>Buster.JS comes with Sinon.JS. This makes mocking out the entire XHR stack in a browser trivial.</p>

<pre><code>buster.testCase("My tests", {
    setUp: function () {
        this.server = this.fakeServer.create();
    },

    "should POST to /todo-items": function () {
        myThing.createTodoItem("Some item");

        assert.equals(this.server.requests.length, 1);
        assert.match(this.server.requests[0], {
            method: "POST",
            url: "/todo-items"
        });
    },

    "should yield list item to callback on success": function () {
        this.server.respondsWith(
            "POST",
            "/todo-items",
            [200, {"content-type": "application/json"},
            '{"text":"Fetch eggs","done":false,"id":1}']);

        var callback = this.spy();
        // Assuming implementation calls the callback with a JSON.parsed
        // response body when the request ends
        myThing.createTodoItem("Fetch eggs", callback);

        // Cause the request to respond, based on respondsWith above.
        this.server.respond();

        // Sinon.JS replaces the entire XHR stack and synchronously handles
        // the request.
        assert.calledOnce(callback);
        assert.equals(callback.getCall(0).args[0], {
            test: "Fetch eggs", done: false, id: 1
        });
    }
})</code></pre>

<p>
  Sinon.JS mocks out the underlying <code>XMLHttpRequest</code>
  (or <code>ActiveXObject</code>) object, so your HTTP libraries don't need any
  modification to be testable in this way - even when using jQuery or another
  3rd party library for your HTTP connections.
</p>

<h2>Feature detection</h2>

<p>
  You can tell Buster.JS to not run certain test cases in certain
  situations. This is useful if you want to run the same test suite for a
  program that works in IE6, so you want to run most of your tests in IE6, but
  also has features that will crash when called in IE6.
</p>

<pre><code>buster.testCase("My thing", {
    requiresSupportFor: {
        "touch events": typeof(document.body.ontouchstart) != "object",
        "XHR": typeof(XMLHttpRequest) != "undefined"
    },

    "should receive touch events": function () {
        // ..
    },

    // ...
});</code></pre>

<p>You can also apply the feature detection filter to nested contexts to only filter out a subset of the test case.</p>

<h2>Custom test beds</h2>

<p class="warning">
  Note: this feature has not yet landed in the beta. Currently it can sort of be
  achieved by adding <code>resources: [{path: "/", content: "html here"}]</code>
  to the config file.
</p>

<p>
  For browser tests, you can specify the HTML document the tests will run
  in. Buster.JS defaults to a plain HTML5 document. But you might want to run
  the tests in a HTML4 strict environment, and what not.
</p>

<pre><code>var config = module.exports;

config["My tests"] = {
    sources: ["../lib/**/*.js"],
    tests: ["*-test.js"],
    testbed: "my-file.html"
}</code></pre>

<p>Script tags for your tests will be added automatically at the ending body tag, or at the end of the document if no ending body tag is present.</p>

<h2>Headless browser testing</h2>

<p class="warning">
  Note: this feature has not yet landed in the beta.
</p>

<p>You don't need a browser to do browser testing with Buster.JS. By running tests and not starting a server, Buster.JS will automatically run the tests headless in a PhantomJS browser.</p>

<p>This is particularly convenient for integration of Buster.JS with editors and IDEs. You can provide a simple "play button" to run the tests, and you don't need to do anything other than shelling out to <kbd>buster test</kbd> which will take care of running the tests in PhantomJS even if there's no Buster.JS server running.</p>

<h2>Logging</h2>

<p>Logging with <code>buster.log</code> will group the log messages in the reporter output with the test that was logged from. When logging objects of various sorts, the logger uses a (pluggable) formatter for pretty output.</p>

<p><%= img "overview/buster-test-logging.png", :width => "633", :height => "382" %></p>

<p>In node.js, when running tests <code>buster.log</code> is available globally by default, for convenience. So you can <code>buster.log</code> in your implementations without requiring buster first.</p>

<h2>Modularity</h2>

<p>Buster.JS consists of many stand-alone modules with a documented API that can be re-used for various purposes.</p>

<p>The <%= m "assertions" %> package can easily be used in other testing frameworks. If you use JsTestDriver, follow <a href="http://cjohansen.no/using-buster-assertions-with-jstestdriver">these steps</a> (hint: it's pretty easy).</p>

<p>If you write your own testing framework, you may find many of our modules useful. <%= m "assertions" %> is one such module, and is completely reusable. You can also use <%= m "capture-server" %> if you want browser automation in your test framework, without implementing the actual browser automation part yourself.</p>

<p>Another example of usage of Buster.JS modules in other projects is <a href="http://github.com/augustl/slidebuster">Slidebuster</a> (note: proof of concept). The <%= m "capture-server" %> module is not test runner specific, it is a generic browser automation framework. Slidebuster uses it so that if you "capture" a normal browser and a touch device, you can swipe left and right on the touch device to change the slides on the normal browser.</p>

<h2>AMD - control when tests start running</h2>

<p>Some applications use a module loader (AMD = Asynchronous Module Definitions). So the default strategy of Buster.JS to start running tests on <code>window.onload</code> may not work for you. You can disable auto running and tell Buster.JS when to start running tets.</p>

<p>Add <code>{autoRun: false}</code> to your config file and call <code>buster.run()</code> to start the test run. That gives you full control over when the test run starts.</p>

<p><a href="<%= doc_url "starting-testrun-manually" %>">Full documentation here</a>.</p>

<h2>Global variables</h2>

<p>
  By default, Buster.JS exposes four global variables: <code>buster</code>,
  <code>expect</code>, <code>assert</code> and <code>refute</code>. The two
  latter are also available as properties on the <code>buster</code> object
  (<code>buster.assert</code>, <code>buster.refute</code>). If you're a purist
  like us, you'll want to disable these additional globals and only have it
  expose the <code>buster</code> global variable (in browsers, on Node you'll
  have to <code>require</code> the things you want to use).
</p>

<p class="warning">
  Note: in the beta, there's not yet a setting for disabling the exposure of these global variables
</p>

<h2>Editor integration</h2>
<h3>TextMate</h3>
<p>Magnar Sveen maintains <a href="https://github.com/magnars/buster.tmbundle">TextMate bundle</a>. It includes snippets, running tests with <kbd>command + R</kbd>, and more.</p>

<h3>Emacs</h3>
<p>Christian Johansen maintains <a href="https://gitorious.org/buster/buster-mode">buster-mode.el</a>.</p>

<p>Magnar Sveen has written a set of <a href="https://github.com/magnars/buster-snippets.el">yasnippet snippets for Buster.JS</a>.</p>
