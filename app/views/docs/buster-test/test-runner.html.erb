buster.testRunner

        <dl>
          <dt>Version</dt>
          <dd>See <%=m "test", "buster-test" %></dd>
          <dt>Module</dt>
          <dd><code>require("buster-test").testRunner;</code></dd>
          <dt>In browsers</dt>
          <dd><code>buster.testRunner;</code></dd>
        </dl>
        <p>
          Evented test runner for both synchronous and asynchronous tests. The
          runner itself always executes asynchronously, making it very good at
          visualizing ongoing progress and helps avoid long running script
          warnings in browsers.
        </p>
        <pre><code>var testRunner = require("buster-test").testRunner;
var xUnitConsoleReporter = require("buster-test").xUnitConsoleReporter;

var runner = testRunner.<%=anchor "create" %>();
var reporter = xUnitConsoleReporter.create({ color: true });
reporter.listen(runner);

runner.<%=anchor "runSuite" %>([<%=m "test/test-context", "testContext" %>, testContext2, ...]);</code></pre>
        <div class="section">
          <h2 id="<%= id('events') %>">Events</h2>
          <%= event("suite:start") %>
          <p>
            Emitted once, as the runner starts running a test suite (typically
            when <%=l "runSuite" %> is called).
          </p>
          <%= event("suite:end", [[:results, "#results"]]) %>
          <p>
            Emitted once, when all contexts are run (typically when
            <%=l "runSuite" %> completes).
          </p>
          <%= event("context:start", [[:testContext, "test/test-context"]]) %>
          <p>
            Emitted every time a <%=m "test/test-context", "<code>context</code>" %> is
            entered.
          </p>
          <%= event("context:end", [[:testContext, "test/test-context"]]) %>
          <p>
            Emitted every time a context is completed.
          </p>
          <%= event("context:unsupported", [[:unsupported, "#unsupported"]]) %>
          <p>
            Emitted every time a context fails its requirements (when that
            happens, neither <code>context:start</code> or
            <code>context:end</code> is emitted).
          </p>
          <%= event("test:setUp", [[:test, "test/test-context#test"]]) %>
          <p>
            Emitted once per test before the setup method(s) for a test is called.
          </p>
          <%= event("test:start", [[:test, "test/test-context#test"]]) %>
          <p>
            Emitted after running the test's setup(s), but before the test itself
            runs.
          </p>
          <%= event("test:async", [[:test, "test/test-context#test"]]) %>
          <p>
            Emitted when a test has been found to be asynchronous (usually means
            that the test function was called and has returned).
          </p>
          <%= event("test:tearDown", [[:test, "test/test-context#test"]]) %>
          <p>
            Emitted once per test before the tear down method(s) for a test is called.
          </p>
          <%= event("test:failure", [[:error, "#error"]]) %>
          <p>
            Emitted when the test throws
            (or <%= anchor("otherwise flags", "assertion-failure") %>)
            an <code>AssertionFailure</code>. Only emitted once per test.
          </p>
          <%= event("test:error", [[:error, "#error"]]) %>
          <p>
            Emitted when the test throws any error that is not an
            <code>AssertionFailure</code>. Only emitted once per test.
          </p>
          <%= event("test:success", [[:test, "test/test-context#test"]]) %>
          <p>
            Emitted if the test passes.
          </p>
          <%= event("test:timeout", [[:test, "test/test-context#test"]]) %>
          <p>
            Emitted if the test runner forcefully aborts the test. This happens
            when the test is asynchronous and does not resolve within the
            <%= anchor("configured timeout", "timeout") %>.
          </p>
          <%= event("test:deferred", [[:test, "test/test-context#test"]]) %>
          <p>
            Emitted when a test is marked as deferred. The test is not run.
          </p>
          <%= event("uncaughtException", [[:exception, "#exception"]]) %>
          <p>
            Uncaught errors are errors that the test runner is unable to associate
            with the test that threw it. They occur in two situations:
          </p>
          <ol>
            <li>
              A synchronous test spawns an asynchronous task that results in an
              error. For instance, calling <code>setTimeout</code> with a callback
              that throws an error in a synchronous test.
            </li>
            <li>
              An aborted asynchronous test throws (for instance, by failing an
              assertion).
            </li>
          </ol>
          <p>
            The <code>"uncaughtException"</code> event will only be emitted when
            the environment supports it and the <%=l "handleUncaughtExceptions" %>
            property is set to <code>true</code>. Browsers that do not support
            <a href="https://developer.mozilla.org/en/DOM/window.onerror"><code>window.onerror</code></a>
            are unable to support this feature.
          </p>
        </div>
        <div class="section">
          <h2 id="<%= id('methods') %>">Methods</h2>
          <h3 id="<%= id('create') %>" data-title="+create([opts])+"><code>var runner = buster.testRunner.create([<%= anchor("opts", "properties") %>]);</code></h3>
          <p>
            Creates a new test runner instance.
          </p>
          <h3 id="<%= id('onCreate') %>" data-title="+onCreate(callback)+"><code>buster.testRunner.onCreate(function (<%= anchor("runner", "create") %>) {});</code></h3>
          <p>
            Register a callback which is called everytime a runner is created with
            <%=l "create" %>.
          </p>
          <h3 id="<%= id('runSuite') %>" data-title="+runSuite(contexts)+"><code><%= anchor("runner", "create") %>.runSuite([<%=m "test/test-context", "testContext" %>, testContext2, ...]);</code></h3>
          <p>
            Run an array of <%=m "test/test-context", "testContext" %> objects as
            a test suite.
          </p>
          <h3 id="<%= id('run') %>" data-title="+run(context)+"><code><%= anchor("runner", "create") %>.run(<%=m "test/test-context", "testContext" %>);</code></h3>
          <p>
            Run a single <%=m "test/test-context", "testContext" %>.  Note that
            this method does not trigger the <%=e "suite:start" %> event, and
            using it instead of <code>runSuite</code> may cause unintended
            behavior in <%=m "test/reporters", "reporters" %>.
          </p>
          <h3 id="<%= id('assertionCount') %>" data-title="+assertionCount()+"><code>var count = <%= anchor("runner", "create") %>.assertionCount();</code></h3>
          <p>
            The default implementation of this method is a no-op function. This
            method is called by the runner after each test to determine the number
            of assertions used in the test. It should not accumulate the assertion
            count.
          </p>
          <p>
            Because the runner itself has no knowledge of the assertion library,
            this method is intended to be overridden by the assertion library in
            use. For instance, this is the integration necessary to count
            assertions with <%=m "assert" %>:
          </p>
          <pre><code>var assertions = 0;

buster.assert.on("pass", function () {
    assertions += 1;
});

buster.testRunner.onCreate(function (runner) {
    runner.on("test:start", function () {
        assertions = 0;
    });
});

buster.testRunner.assertionCount = function () {
    return assertions;
};</code></pre>
          <h3 id="<%= id('assertionFailure') %>" data-title="+assertionFailure()+"><code><%= anchor("runner", "create") %>.assertionFailure(<%=anchor "exception" %>);</code></h3>
          <p>
            Can be called from assertion libraries that do not throw an exception
            on assertion failure. For assertion failures to be picked up no matter
            what in asynchronous tests, this method needs to be called, as some
            exceptions are not possible for the runner to catch.
          </p>
        </div>
        <div class="section">
          <h2 id="<%=id 'properties' %>">Properties</h2>
          <p>
            Test runner properties can be set when creating an instance, or simply
            by assigning to the property on an existing runner.
          </p>
          <pre><code>var runner = buster.testRunner.create({
    timeout: 500
});

// Or:

var runner = buster.testRunner.create();
runner.timeout = 500;</code></pre>
          <%= property("failOnNoAssertions", "true") %>
          <p>
            When <code>true</code>, a test with no assertions is considered a
            failure. The number of assertions are measured with
            <%=l "assertionCount" %>.
          </p>
          <%= property("timeout", "250") %>
          <p>
            When an asynchronous test runs for more than <code>timeout</code> ms, the
            runner will abort it and emit a <%=e "test:timeout" %> event.
          </p>
          <%= property("handleUncaughtExceptions", "true") %>
          <p>
            When <code>true</code>, the runner will attempt to
            handle <%= e("uncaughtException", "uncaught exceptions") %>, by
            registering a listener on <code>process</code> for
            <a href="http://nodejs.org/docs/v0.4.0/api/process.html#event_uncaughtException_"><code>"uncaughtException"</code></a>
            (node.js) and assigning a callback to
            <a href="https://developer.mozilla.org/en/DOM/window.onerror"><code>window.onerror</code></a> (browsers).
          </p>
        </div>
        <div class="section">
          <h2 id="<%= id('supporting-objects') %>">Supporting objects</h2>
          <h3 id="<%= id('results') %>"><code>results</code></h3>
          <p>
            A high-level numeric report. Emitted with <%=e "suite:end" %>.
          </p>
          <pre><code>{
    contexts: 0,
    tests: 0,
    errors: 0,
    failures: 0,
    assertions: 0,
    timeouts: 0,
    deferred: 0
}</code></pre>
          <h3 id="<%= id('error') %>"><code>error</code></h3>
          <p>
            An object representing a test failure (or error), emitted with
            <%=e "test:failure" %> and <%=e "test:error" %>.
          </p>
          <pre><code>{
    name: "Name of test",
    error: {
        name: "Type of exception",
        message: "Exception message",
        stack: "Stack trace as string"
    }
}</code></pre>
          <h3 id="<%= id('exception') %>"><code>exception</code></h3>
          <p>
            An exception-like object, emitted with
            <%=e "uncaughtException" %>.
            In browsers, this object does not have a stack trace.
          </p>
          <pre><code>{
    name: "Type of exception",
    message: "Exception message",
    stack: "Stack trace as string"
}</code></pre>
          <h3 id="<%= id('unsupported') %>"><code>unsupported</code></h3>
          <p>
            Information about an unsupported context. Emitted with
            <%=e "context:unsupported" %>. Contains an array of names of failed
            requirements and a context object.
          </p>
          <pre><code>{
    context: <%=m "context") %>,
    unsupported: ["label1", "label2"]
}</code></pre>
        </div>

